---
- name: Rocketpool Install | Set config execution parameters
  ansible.builtin.set_fact:
    ROCKETPOOL_CLI_CONFIG: "{{ ROCKETPOOL_CLI_CONFIG | default('')
                             + '--' + option.name
                             + (' ' if (option.value | default('') | length) == 0 else '=')
                             + (option.value | default('')) + ' '
                           }}"
  loop: "{{ rocketpool.config }}"
  loop_control:
    label: "{{ option.name }} = {{ option.value | default('true') }}"
    loop_var: 'option'

- name: Rocketpool Install | Output config command via debug
  ansible.builtin.debug:
    msg:
      - "Executing config command:"
      - "{{ rocketpool_bin }} service config {{ ROCKETPOOL_CLI_CONFIG }}"

- name: Rocketpool Install | Create rocketpool directories
  become: true
  ansible.builtin.file:
    state: directory
    path: "{{ dir.path }}"
    owner: "{{ dir.owner }}"
    group: "{{ dir.group }}"
    mode: 0700
  loop:
    - { path: "{{ rocketpool_user_home }}/.rocketpool", owner: "{{ rocketpool.user | default('rp') }}", group: "{{ rocketpool.user | default('rp') }}" }
    - { path: "{{ eth.secrets.dataDir }}", owner: "{{ rocketpool.user | default('rp') }}", group: "{{ rocketpool.user | default('rp') }}" }
    - { path: "{{ eth.eth1.dataDir }}", owner: 'root', group: 'root' }
    - { path: "{{ eth.eth2.dataDir }}", owner: 'root', group: 'root' }
    - { path: "{{ grafana.dataDir }}", owner: "{{ rocketpool.user | default('rp') }}", group: "{{ rocketpool.user | default('rp') }}" }
  loop_control:
    loop_var: dir
    label: "{{ dir.path }}"

- name: Rocketpool Install | Execute rocketpool service config command
  become: true
  become_user: "{{ rocketpool.user | default('rp') }}"
  ansible.builtin.command: "{{ rocketpool_bin }} service config {{ ROCKETPOOL_CLI_CONFIG }}"
  args:
    chdir: "{{ rocketpool_user_home }}/.rocketpool"
  vars:
    ansible_python_interpreter: /usr/bin/python3
  changed_when: true

- name: Rocketpool Install | Install rocketpool update tracker
  become: true
  become_user: "{{ rocketpool.user | default('rp') }}"
  ansible.builtin.command: "{{ rocketpool_bin }} service install-update-tracker -y --version {{ rocketpool_version }}"
  args:
    chdir: "{{ rocketpool_user_home }}/.rocketpool"
  vars:
    ansible_python_interpreter: /usr/bin/python3
  changed_when: true

- name: Rocketpool Install | Check for previous installation
  ansible.builtin.stat:
    path: "{{ rocketpool_user_home }}/.cloudstruct"
  register: previous_install

- name: Rocketpool Install | Execute rocketpool service install command
  become: true
  become_user: "{{ rocketpool.user | default('rp') }}"
  ansible.builtin.command: "{{ rocketpool_bin }} service install -y --no-deps --version {{ rocketpool_version }} --verbose"
  args:
    chdir: "{{ rocketpool_user_home }}/.rocketpool"
  vars:
    ansible_python_interpreter: /usr/bin/python3
  changed_when: true

- name: Rocketpool Install | Correct permissions on grafana datasource file
  ansible.builtin.file:
    path: "{{ rocketpool_user_home }}/.rocketpool/grafana-prometheus-datasource.yml"
    owner: "{{ rocketpool.user | default('rp') }}"
    group: "{{ rocketpool.user | default('rp') }}"
    mode: 0664

- name: Rocketpool Install | Template override files
  ansible.builtin.template:
    src: "{{ template_file.src }}"
    dest: "{{ template_file.dst }}"
    owner: "{{ rocketpool.user | default('rp') }}"
    group: "{{ rocketpool.user | default('rp') }}"
    mode: 0660
  loop:
    - {src: "override_eth1.yml.j2", dst: "{{ rocketpool_user_home }}/.rocketpool/override/eth1.yml"}
    - {src: "override_eth2.yml.j2", dst: "{{ rocketpool_user_home }}/.rocketpool/override/eth2.yml"}
    - {src: "override_grafana.yml.j2", dst: "{{ rocketpool_user_home }}/.rocketpool/override/grafana.yml"}
    - {src: "override_prometheus.yml.j2", dst: "{{ rocketpool_user_home }}/.rocketpool/override/prometheus.yml"}
  loop_control:
    label: "{{ template_file.dst }}"
    loop_var: 'template_file'

- name: Rocketpool Install | Check for previous installation
  ansible.builtin.stat:
    path: "{{ rocketpool_user_home }}/.cloudstruct"
  register: previous_install

- name: Rocketpool Install | Execute rocketpool service start command on existing installation
  become: true
  become_user: "{{ rocketpool.user | default('rp') }}"
  ansible.builtin.command: "{{ rocketpool_bin }} service start -y"
  args:
    chdir: "{{ rocketpool_user_home }}/.rocketpool"
  vars:
    ansible_python_interpreter: /usr/bin/python3
  changed_when: true
  when: previous_install.stat.exists

- name: Rocketpool Install | New installation Block
  when: not previous_install.stat.exists
  block:
    - name: Rocketpool Install | Execute rocketpool service start command for new installation
      become: true
      become_user: "{{ rocketpool.user | default('rp') }}"
      ansible.builtin.command: "{{ rocketpool_bin }} service start -y --ignore-slash-timer"
      args:
        chdir: "{{ rocketpool_user_home }}/.rocketpool"
      vars:
        ansible_python_interpreter: /usr/bin/python3
      changed_when: true

    - name: Rocketpool Install | Create previous installation check file
      ansible.builtin.file:
        state: touch
        path: "{{ rocketpool_user_home }}/.cloudstruct"
        owner: "{{ rocketpool.user | default('rp') }}"
        group: "{{ rocketpool.user | default('rp') }}"
        mode: 0700
