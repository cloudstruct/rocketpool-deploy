---
# Rocketpool Settings
rocketpool:
  # Linux user under whom rocketpool will be installed
  # user: 'rp'  # Optional: Defaults to 'rp'
  # uid: '1001' # Optional: Defaults to '1001'
  # https://github.com/rocket-pool/smartnode-install/releases
  ports:
    beaconNodeMetrics: 9100
    validatorClientMetrics: 9101
    nodeMetrics: 9102
    watchTowerMetrics: 9104
    fallbackExecutionCommonHttpPort: 8545
    fallbackExecutionCommonWsPort: 8546
    consensusCommonP2pPort: 9001
    consensusCommonApiPort: 5052
    prysmRpcPort: 5053
    executionCommonHttpPort: 8545
    executionCommonWsPort: 8546
    gethP2pPort: 30303
  version: 'v1.3.0'
  config:
    # Uncomment and fill in the options you require
    # See 'rocketpool service config --help' for a list of all possible parameter input values and defaults
    # - { name: 'executionClientMode', value: '' }
    # - { name: 'executionClient', value: '' }
    - { name: 'useFallbackExecutionClient' }
    # - { name: 'fallbackExecutionClientMode', value: '' }
    - { name: 'fallbackExecutionClient', value: 'infura' }
    # - { name: 'reconnectDelay', value: '' }
    # - { name: 'consensusClientMode', value: '' }
    - { name: 'consensusClient', value: 'prysm' }
    # - { name: 'externalConsensusClient', value: '' }
    - { name: 'enableMetrics' }
    # - { name: 'bnMetricsPort', value: "{{ rocketpool.ports.beaconNodeMetrics }}" }
    # - { name: 'vcMetricsPort', value: "{{ rocketpool.ports.validatorClientMetrics }}" }
    # - { name: 'nodeMetricsPort', value: "{{ rocketpool.ports.nodeMetrics }}" }
    # - { name: 'exporterMetricsPort', value: "{{ prometheus.node_exporter.port }}" }
    # - { name: 'watchtowerMetricsPort', value: "{{ rocketpool.ports.watchTowerMetrics }}" }
    # - { name: 'fallbackPocket-gatewayID', value: '' }
    # - { name: 'fallbackPocket-containerTag', value: '' }
    # - { name: 'fallbackPocket-additionalFlags', value: '' }
    # - { name: 'lighthouse-maxPeers', value: '' }
    # - { name: 'lighthouse-containerTag', value: '' }
    # - { name: 'lighthouse-additionalBnFlags', value: '' }
    # - { name: 'lighthouse-additionalVcFlags', value: '' }
    # - { name: 'native-ecHttpUrl', value: '' }
    # - { name: 'native-consensusClient', value: '' }
    # - { name: 'native-ccHttpUrl', value: '' }
    # - { name: 'native-validatorRestartCommand', value: '' }
    # - { name: 'pocket-gatewayID', value: '' }
    # - { name: 'pocket-containerTag', value: '' }
    # - { name: 'pocket-additionalFlags', value: '' }
    - { name: 'consensusCommon-graffiti', value: 'CloudStruct' }
    # - { name: 'consensusCommon-checkpointSyncUrl', value: '' }
    # - { name: 'consensusCommon-p2pPort', value: "{{ rocketpool.ports.consensusCommonP2pPort }}" }
    # - { name: 'consensusCommon-apiPort', value: "{{ rocketpool.ports.consensusCommonApiPort }}" }
    # - { name: 'consensusCommon-openApiPort' }
    # - { name: 'consensusCommon-doppelgangerDetection', value: '' }
    # - { name: 'prysm-maxPeers', value: '' }
    # - { name: 'prysm-rpcPort', value: '' }
    # - { name: 'prysm-openRpcPort' }
    # - { name: 'prysm-bnContainerTag', value: '' }
    # - { name: 'prysm-vcContainerTag', value: '' }
    # - { name: 'prysm-additionalBnFlags', value: '' }
    # - { name: 'prysm-additionalVcFlags', value: '' }
    # - { name: 'externalLighthouse-httpUrl', value: '' }
    # - { name: 'externalLighthouse-graffiti', value: '' }
    # - { name: 'externalLighthouse-doppelgangerDetection', value: '' }
    # - { name: 'externalLighthouse-containerTag', value: '' }
    # - { name: 'externalLighthouse-additionalVcFlags', value: '' }
    - { name: 'exporter-enableRootFs' }
    # - { name: 'exporter-port', value: "{{ prometheus.node_exporter.port }}" }
    - { name: 'exporter-containerTag', value: "{{ prometheus.node_exporter.version }}" }
    # - { name: 'exporter-additionalFlags', value: '' }
    # - { name: 'teku-maxPeers', value: '' }
    # - { name: 'teku-containerTag', value: '' }
    # - { name: 'teku-additionalBnFlags', value: '' }
    # - { name: 'teku-additionalVcFlags', value: '' }
    # - { name: 'smartnode-network', value: '' }
    # - { name: 'smartnode-projectName', value: '' }
    - { name: 'smartnode-dataPath', value: '/data/secrets' }
    # - { name: 'smartnode-manualMaxFee', value: '' }
    # - { name: 'smartnode-priorityFee', value: '' }
    # - { name: 'smartnode-rplClaimGasThreshold', value: '' }
    # - { name: 'smartnode-minipoolStakeGasThreshold', value: '' }
    # - { name: 'executionCommon-httpPort', value: "{{ rocketpool.ports.executionCommonHttpPort }}" }
    # - { name: 'executionCommon-wsPort', value: "{{ rocketpool.ports.executionCommonWsPort }}" }
    # - { name: 'executionCommon-openRpcPorts' }
    # - { name: 'geth-cache', value: '' }
    # - { name: 'geth-maxPeers', value: '' }
    # - { name: 'geth-p2pPort', value: "{{ rocketpool.ports.gethP2pPort }}" }
    # - { name: 'geth-ethstatsLabel', value: '' }
    # - { name: 'geth-ethstatsLogin', value: '' }
    # - { name: 'geth-containerTag', value: '' }
    # - { name: 'geth-additionalFlags', value: '' }
    - { name: 'infura-projectID', value: '62bb6f70527d4076856860965652b6fb' }
    # - { name: 'infura-containerTag', value: '' }
    # - { name: 'infura-additionalFlags', value: '' }
    # - { name: 'externalExecution-httpUrl', value: '' }
    # - { name: 'externalExecution-wsUrl', value: '' }
    # - { name: 'fallbackExecutionCommon-httpPort', value: "{{ rocketpool.ports.fallbackExecutionCommonHttpPort }}" }
    # - { name: 'fallbackExecutionCommon-wsPort', value: "{{ rocketpool.ports.fallbackExecutionCommonWsPort }}" }
    # - { name: 'fallbackExecutionCommon-openRpcPorts' }
    # - { name: 'nimbus-maxPeers', value: '' }
    # - { name: 'nimbus-containerTag', value: '' }
    # - { name: 'nimbus-additionalFlags', value: '' }
    # - { name: 'externalPrysm-httpUrl', value: '' }
    # - { name: 'externalPrysm-jsonRpcUrl', value: '' }
    # - { name: 'externalPrysm-graffiti', value: '' }
    # - { name: 'externalPrysm-doppelgangerDetection', value: '' }
    # - { name: 'externalPrysm-containerTag', value: '' }
    # - { name: 'externalPrysm-additionalVcFlags', value: '' }
    # - { name: 'prometheus-port', value: "{{ prometheus.port }}" }
    # - { name: 'prometheus-openPort' }
    - { name: 'prometheus-containerTag', value: "{{ prometheus.version }}" }
    # - { name: 'prometheus-additionalFlags', value: '' }
    # - { name: 'fallbackInfura-projectID', value: '' }
    # - { name: 'fallbackInfura-containerTag', value: '' }
    # - { name: 'fallbackInfura-additionalFlags', value: '' }
    # - { name: 'fallbackExternalExecution-httpUrl', value: '' }
    # - { name: 'fallbackExternalExecution-wsUrl', value: '' }
    # - { name: 'externalTeku-httpUrl', value: '' }
    # - { name: 'externalTeku-graffiti', value: '' }
    # - { name: 'externalTeku-containerTag', value: '' }
    # - { name: 'externalTeku-additionalVcFlags', value: '' }
    # - { name: 'grafana-port', value: "{{ grafana.port }}" }
    - { name: 'grafana-containerTag', value: "{{ grafana.version }}" }

grafana:
  # Where to store grafana persistent data (/data is EBS volume mount location)
  data_path: '/data/grafana'
  port: 3100
  # https://grafana.com/docs/grafana/latest/release-notes/
  version: '8.4.6'

eth:
  network: 'mainnet'

prometheus:
  # https://github.com/prometheus/prometheus/releases
  version: 'v2.34.0'
  # Where to store Prometheus persistent data. (/data is EBS volume mount location)
  data_path: '/data/prometheus/'
  # Node Exporter settings
  port: 9091
  node_exporter:
    port: 9103
    # https://github.com/prometheus/node_exporter/releases
    version: 'v1.3.1'
